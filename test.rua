#!/usr/bin/env ./run.sh

-- single-statement lambdas
asserteq( (||1)(), 1)
asserteq( (|x|x+1)(1), 2)

-- single-statement lambda with multiple-return ... works
assert(load[[ asserteq( (|x|x+1,x+1)(1), 2) ]])()
-- but now for some reason multiple-return wrapped in parenthesis doesn't work ...
--assert(load[[ asserteq( (|x|(x+1, x+1))(1), 2) ]])()

-- multiple-statement lamda
asserteq( (|n| do local sum=0 for i=1,n do sum = sum + i end return sum end)(10), 55)

-- function metamethods (in ext)
local g = (|x|x+1) * (|x|x-1)
-- function g(x) = (x+1)*(x-1)
asserteq(g(2), (2+1)*(2-1))
asserteq(g(3), (3+1)*(3-1))
-- tempting to make a :cartesian :product :outer or somethign like that which combines args and multiplies results ...

-- bit operators
asserteq(2 << 2, 8)

-- op-assign
do
	local x = 1
	x += 2
	asserteq(x, 3)
end

-- pack op assign
do
	local a,b,c = 1,2,3
	a,b,c += 3,2,1
	asserteq(a, 4)
	asserteq(b, 4)
	asserteq(c, 4)
end

--[=[ bit operator metamethods ... not supported yet
local g = (|x|x+1) << (|x|x-1)
-- g = |x| (x+1)*(x-1)
asserteq(g(2), (2+1) << (2-1))
asserteq(g(3), (3+1) << (3-1))
--]=]

-- global-scope boxed ctypes
if int then asserteq(int(7)/int(2), int(3)) end

-- integer division TODO has errors
--print(7//2, 3)

-- lambda + function-operator
asserteq(((|x|x+1) * (|x|x-1))(3), 8)

-- function operators
asserteq((|x,y|x+y):bind(2)(3), 5)

--[=[ TODO test locals-as-default
-- but that should be shimming using require(), not load(), so I do need to move its scope to load() as well ...
do
	x = 1
end
asserteq(x, nil)
--]=]

-- [[ safe-navigation operators ...
do
	-- read

	local a = nil
	asserteq(a?.b, nil)
	asserteq(a?['b'], nil)
	asserteq(a?.b?.c, nil)
	asserteq(a?['b']?.c, nil)
	asserteq(a?.b?['c'], nil)

	local a = {}
	asserteq(a?.b?.c, nil)
	a.b = 'foo'
	asserteq(a?.b, 'foo')
	asserteq(a?['b'], 'foo')
	a.b = {}
	a.b.c = 'bar'
	asserteq(a?.b?.c, 'bar')
	asserteq(a?['b']?.c, 'bar')
	asserteq(a?.b?['c'], 'bar')
end
--]]
-- [[ safe-navigation call operators
do
	local a = nil
	asserteq(a?(), nil)			-- optcall

	asserterror(||a?.b?.c())	-- error cuz a?.b?.c is nil, and that'll be called (right? or does it short-circuit?)

	local a = {}
	asserterror(||a?.b?.c())	-- error cuz a?.b?.c is nil, and that'll be called (right? or does it short-circuit?)

	asserteq(a?.b?(), nil)		-- optcall optindex
	asserteq(a?.b?.c?(), nil)	-- optcall optindex

	asserteq(a.b?(), nil)		-- optcall index

	asserteq(a?.b?:c?(), nil)	-- optcall optindexself absent

	a.b = |x| asserteq(x, a)
	a?:b()						-- call optindexself present
--	a?:b?()						-- optcall optindexself present
end
--]]
--[[ safe-navigation write operators ...
do
	a.foo = 'bar'
	a.b = function(self)
		asserteq(self.foo, 'bar')
		return 'bar'
	end
	asserteq(a:b?(), 'bar')

	-- write too?

	a = nil
	a?.b = 'foo'		-- assert no error
	a?.b?.c = 'foo'		-- assert no error and no assignment
	a = {}
	a?.b = 'foo'		-- assert no error
	asserteq(a.b, 'foo')
end
--]]

-- tests:
-- multi line lambdas
-- bit operators
-- :bind(), :co() function metatable
-- :resume() thread metatable
-- int ctype global
if int then asserttableieq({(|x,y| do coroutine.yield(x << y) end):bind(int(3)):co():resume(int(4))}, {true, 48}) end

print'done'
